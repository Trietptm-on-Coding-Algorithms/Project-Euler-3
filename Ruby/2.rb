# Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

abort('Usage: ruby 2.rb [upper_bound]') unless ARGV[0]
ARGV[0] = Integer(ARGV[0].tr(',', ''))    # For easy of use and readability.

# Memoized fibonacci.
def fib(limit = ARGV[0])
	seq   = [0, 1]
	seq_i = seq.size

	until seq.last >= limit
		seq << seq[seq_i - 2] + seq[seq_i - 1]
		seq_i += 1
	end

	seq[0...-1]    # Non-inclusively up to the last element. Effectively, fib sequence of [0, limit).
end

p fib.select(&:even?).inject(:+)

# Output
# phizo@jizzo ~/C/P/Ruby> time ruby 2.rb 4,000,000
# 4613732
#         0.05 real         0.03 user         0.00 sys
